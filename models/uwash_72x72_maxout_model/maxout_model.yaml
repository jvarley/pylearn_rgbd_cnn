!obj:pylearn2.train.Train {
    dataset: &train !obj:rgbd_c01b_dataset.get_dataset {
        which_set: 'c01b_train',
        dataset_filepath: "/rgbd-dataset/rgbd_preprocessed_72x72.h5"
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: %(batch_size)i,
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [72,72],
            num_channels: 4,
            axes: ['c', 0, 1, 'b'],
        },
        layers: [ !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'h0',
                     num_channels: %(output_channels_h0)i,
                     num_pieces: 2,
                     irange: .05,
                     kernel_shape: [8, 8],
                     pool_shape: [8, 8],
                     pool_stride: [2, 2],
                     max_kernel_norm: 1.9365
                 },
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'h1',
                     num_channels: %(output_channels_h1)i,
                     num_pieces: 2,
                     irange: .05,
                     kernel_shape: [8, 8],
                     pool_shape: [4, 4],
                     pool_stride: [2, 2],
                     max_kernel_norm: 1.9365
                 },
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'h2',
                     num_channels: %(output_channels_h2)i,
                     num_pieces: 2,
                     irange: .05,
                     kernel_shape: [8, 8],
                     pool_shape: [4, 4],
                     pool_stride: [2, 2],
                     max_kernel_norm: 1.9365
                 },
                 !obj:pylearn2.models.mlp.Softmax {
                     max_col_norm: 1.9365,
                     layer_name: 'y',
                     n_classes: 300,
                     istdev: .05
                 }
                ],
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: %(batch_size)i,
        learning_rate: .001,
        batches_per_iter: 20,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: .5
        },
        monitoring_dataset:
            {
                'valid' : !obj:rgbd_c01b_dataset.get_dataset {
                              which_set: 'c01b_valid',
                              dataset_filepath: "/rgbd-dataset/rgbd_preprocessed_72x72.h5"
                          },
                'test'  : !obj:rgbd_c01b_dataset.get_dataset {
                              which_set: 'c01b_test',
                              dataset_filepath: "/rgbd-dataset/rgbd_preprocessed_72x72.h5"
                          }
            },
        cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
            input_include_probs: { 'h0' : .8 },
            input_scales: { 'h0' : 1. }
        },
        termination_criterion: !obj:pylearn2.termination_criteria.And {
            criteria: [
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: %(max_epochs)i
                },
            ]
        },
    },
    extensions:
        [ !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "%(save_path)s/maxout_model.pkl"
        }, !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: 10,
            final_momentum: .99
        }
    ]
}


